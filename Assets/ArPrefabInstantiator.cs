using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.XR.ARFoundation;

public class ArPrefabInstantiator : MonoBehaviour
{
    public ARRaycastManager raycastManager; // Need ArRaycastManager to allow for raycasting in AR - using raycasty to instantiate objects

    public GameObject prefab; // Your 3d model or whatever! Maybe particles? To intantiate

    private GameObject prefabInstance; // This will hold a reference to the object that we created (Note: it's null by default)

    void Update()
    {
        Vector2 touchPosition = Input.GetTouch(0).position; // Define the point on the phone screen which we have touched (in which to raycast from). If player not touching screen, returns 0-value Vector2.

        List<ARRaycastHit> hits = new List<ARRaycastHit>(); // Need a "hit" variable to store info on what the raycast hits

        // Perform raycast and detect any "PlaneWithinPolygon" i.e. the surface planes that are generated by the AR Plane Manager 
        if (raycastManager.Raycast(touchPosition, hits, UnityEngine.XR.ARSubsystems.TrackableType.PlaneWithinPolygon)) // Hit results are dumped into "hits" list
        {
            if (Input.touchCount > 0 && Input.GetTouch(0).phase == TouchPhase.Began) // Check that player is touching screen, before attemptint to instantiate object
            {
                if (prefabInstance == null) // If we haven't yet instantiated the prefab, then do so
                {
                    prefabInstance = Instantiate(prefab, hits[0].pose.position, prefab.transform.rotation); // Create prefab at the postition first hit by the raycast, with the default prefab rotation
                }                
            }     
        }
    }
}
